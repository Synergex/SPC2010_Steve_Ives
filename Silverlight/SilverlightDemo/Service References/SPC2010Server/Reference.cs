//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace SilverlightDemo.SPC2010Server {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MethodStatus", Namespace="http://schemas.datacontract.org/2004/07/SilverlightDemo.Web")]
    public enum MethodStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InfoError = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FatalError = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/SilverlightDemo.Web")]
    public partial class Customer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CustomerIdField;
        
        private string CustomerNameField;
        
        private System.DateTime DateCreatedField;
        
        private System.DateTime DateModifiedField;
        
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated {
            get {
                return this.DateCreatedField;
            }
            set {
                if ((this.DateCreatedField.Equals(value) != true)) {
                    this.DateCreatedField = value;
                    this.RaisePropertyChanged("DateCreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateModified {
            get {
                return this.DateModifiedField;
            }
            set {
                if ((this.DateModifiedField.Equals(value) != true)) {
                    this.DateModifiedField = value;
                    this.RaisePropertyChanged("DateModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/SilverlightDemo.Web")]
    public partial class Contact : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ContactIdField;
        
        private int CustomerIdField;
        
        private string DepartmentField;
        
        private string EmailField;
        
        private string FirstNameField;
        
        private string FriendlyNameField;
        
        private string HomePhoneField;
        
        private string LastNameField;
        
        private string SalutationField;
        
        private string TitleField;
        
        private string WorkPhoneField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContactId {
            get {
                return this.ContactIdField;
            }
            set {
                if ((this.ContactIdField.Equals(value) != true)) {
                    this.ContactIdField = value;
                    this.RaisePropertyChanged("ContactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FriendlyName {
            get {
                return this.FriendlyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FriendlyNameField, value) != true)) {
                    this.FriendlyNameField = value;
                    this.RaisePropertyChanged("FriendlyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HomePhone {
            get {
                return this.HomePhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.HomePhoneField, value) != true)) {
                    this.HomePhoneField = value;
                    this.RaisePropertyChanged("HomePhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salutation {
            get {
                return this.SalutationField;
            }
            set {
                if ((object.ReferenceEquals(this.SalutationField, value) != true)) {
                    this.SalutationField = value;
                    this.RaisePropertyChanged("Salutation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkPhone {
            get {
                return this.WorkPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkPhoneField, value) != true)) {
                    this.WorkPhoneField = value;
                    this.RaisePropertyChanged("WorkPhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/SilverlightDemo.Web")]
    public partial class Address : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AddressIdField;
        
        private string AddressTypeField;
        
        private string CityField;
        
        private int CustomerIdField;
        
        private string StateField;
        
        private string StreetField;
        
        private string ZipField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AddressId {
            get {
                return this.AddressIdField;
            }
            set {
                if ((this.AddressIdField.Equals(value) != true)) {
                    this.AddressIdField = value;
                    this.RaisePropertyChanged("AddressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddressType {
            get {
                return this.AddressTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressTypeField, value) != true)) {
                    this.AddressTypeField = value;
                    this.RaisePropertyChanged("AddressType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerId {
            get {
                return this.CustomerIdField;
            }
            set {
                if ((this.CustomerIdField.Equals(value) != true)) {
                    this.CustomerIdField = value;
                    this.RaisePropertyChanged("CustomerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zip {
            get {
                return this.ZipField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipField, value) != true)) {
                    this.ZipField = value;
                    this.RaisePropertyChanged("Zip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SPC2010Server.ISPC2010WcfService")]
    public interface ISPC2010WcfService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISPC2010WcfService/GetCustomers", ReplyAction="http://tempuri.org/ISPC2010WcfService/GetCustomersResponse")]
        System.IAsyncResult BeginGetCustomers(System.AsyncCallback callback, object asyncState);
        
        SilverlightDemo.SPC2010Server.MethodStatus EndGetCustomers(out System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer> customers, out string message, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISPC2010WcfService/GetCustomerContacts", ReplyAction="http://tempuri.org/ISPC2010WcfService/GetCustomerContactsResponse")]
        System.IAsyncResult BeginGetCustomerContacts(int customerId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> EndGetCustomerContacts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISPC2010WcfService/GetCustomerAddresses", ReplyAction="http://tempuri.org/ISPC2010WcfService/GetCustomerAddressesResponse")]
        System.IAsyncResult BeginGetCustomerAddresses(int customerId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> EndGetCustomerAddresses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISPC2010WcfService/GetCustomerForUpdate", ReplyAction="http://tempuri.org/ISPC2010WcfService/GetCustomerForUpdateResponse")]
        System.IAsyncResult BeginGetCustomerForUpdate(int customerId, System.AsyncCallback callback, object asyncState);
        
        SilverlightDemo.SPC2010Server.MethodStatus EndGetCustomerForUpdate(out SilverlightDemo.SPC2010Server.Customer customer, out byte[] grfa, out string message, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISPC2010WcfService/UpdateCustomer", ReplyAction="http://tempuri.org/ISPC2010WcfService/UpdateCustomerResponse")]
        System.IAsyncResult BeginUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, System.AsyncCallback callback, object asyncState);
        
        SilverlightDemo.SPC2010Server.MethodStatus EndUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, out string message, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISPC2010WcfServiceChannel : SilverlightDemo.SPC2010Server.ISPC2010WcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer> customers {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer>)(this.results[0]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public SilverlightDemo.SPC2010Server.MethodStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightDemo.SPC2010Server.MethodStatus)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomerContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomerContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomerAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomerAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCustomerForUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCustomerForUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightDemo.SPC2010Server.Customer customer {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightDemo.SPC2010Server.Customer)(this.results[0]));
            }
        }
        
        public byte[] grfa {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SilverlightDemo.SPC2010Server.MethodStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightDemo.SPC2010Server.MethodStatus)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SilverlightDemo.SPC2010Server.Customer customer {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightDemo.SPC2010Server.Customer)(this.results[0]));
            }
        }
        
        public byte[] grfa {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        public string message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public SilverlightDemo.SPC2010Server.MethodStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SilverlightDemo.SPC2010Server.MethodStatus)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SPC2010WcfServiceClient : System.ServiceModel.ClientBase<SilverlightDemo.SPC2010Server.ISPC2010WcfService>, SilverlightDemo.SPC2010Server.ISPC2010WcfService {
        
        private BeginOperationDelegate onBeginGetCustomersDelegate;
        
        private EndOperationDelegate onEndGetCustomersDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomerContactsDelegate;
        
        private EndOperationDelegate onEndGetCustomerContactsDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomerContactsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomerAddressesDelegate;
        
        private EndOperationDelegate onEndGetCustomerAddressesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomerAddressesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCustomerForUpdateDelegate;
        
        private EndOperationDelegate onEndGetCustomerForUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCustomerForUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateCustomerDelegate;
        
        private EndOperationDelegate onEndUpdateCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SPC2010WcfServiceClient() {
        }
        
        public SPC2010WcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SPC2010WcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SPC2010WcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SPC2010WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCustomersCompletedEventArgs> GetCustomersCompleted;
        
        public event System.EventHandler<GetCustomerContactsCompletedEventArgs> GetCustomerContactsCompleted;
        
        public event System.EventHandler<GetCustomerAddressesCompletedEventArgs> GetCustomerAddressesCompleted;
        
        public event System.EventHandler<GetCustomerForUpdateCompletedEventArgs> GetCustomerForUpdateCompleted;
        
        public event System.EventHandler<UpdateCustomerCompletedEventArgs> UpdateCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightDemo.SPC2010Server.ISPC2010WcfService.BeginGetCustomers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightDemo.SPC2010Server.MethodStatus SilverlightDemo.SPC2010Server.ISPC2010WcfService.EndGetCustomers(out System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer> customers, out string message, System.IAsyncResult result) {
            return base.Channel.EndGetCustomers(out customers, out message, result);
        }
        
        private System.IAsyncResult OnBeginGetCustomers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).BeginGetCustomers(callback, asyncState);
        }
        
        private object[] OnEndGetCustomers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer> customers = this.GetDefaultValueForInitialization<System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer>>();
            string message = this.GetDefaultValueForInitialization<string>();
            SilverlightDemo.SPC2010Server.MethodStatus retVal = ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).EndGetCustomers(out customers, out message, result);
            return new object[] {
                    customers,
                    message,
                    retVal};
        }
        
        private void OnGetCustomersCompleted(object state) {
            if ((this.GetCustomersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomersCompleted(this, new GetCustomersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomersAsync() {
            this.GetCustomersAsync(null);
        }
        
        public void GetCustomersAsync(object userState) {
            if ((this.onBeginGetCustomersDelegate == null)) {
                this.onBeginGetCustomersDelegate = new BeginOperationDelegate(this.OnBeginGetCustomers);
            }
            if ((this.onEndGetCustomersDelegate == null)) {
                this.onEndGetCustomersDelegate = new EndOperationDelegate(this.OnEndGetCustomers);
            }
            if ((this.onGetCustomersCompletedDelegate == null)) {
                this.onGetCustomersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomersCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomersDelegate, null, this.onEndGetCustomersDelegate, this.onGetCustomersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightDemo.SPC2010Server.ISPC2010WcfService.BeginGetCustomerContacts(int customerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomerContacts(customerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> SilverlightDemo.SPC2010Server.ISPC2010WcfService.EndGetCustomerContacts(System.IAsyncResult result) {
            return base.Channel.EndGetCustomerContacts(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomerContacts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customerId = ((int)(inValues[0]));
            return ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).BeginGetCustomerContacts(customerId, callback, asyncState);
        }
        
        private object[] OnEndGetCustomerContacts(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> retVal = ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).EndGetCustomerContacts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomerContactsCompleted(object state) {
            if ((this.GetCustomerContactsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomerContactsCompleted(this, new GetCustomerContactsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomerContactsAsync(int customerId) {
            this.GetCustomerContactsAsync(customerId, null);
        }
        
        public void GetCustomerContactsAsync(int customerId, object userState) {
            if ((this.onBeginGetCustomerContactsDelegate == null)) {
                this.onBeginGetCustomerContactsDelegate = new BeginOperationDelegate(this.OnBeginGetCustomerContacts);
            }
            if ((this.onEndGetCustomerContactsDelegate == null)) {
                this.onEndGetCustomerContactsDelegate = new EndOperationDelegate(this.OnEndGetCustomerContacts);
            }
            if ((this.onGetCustomerContactsCompletedDelegate == null)) {
                this.onGetCustomerContactsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomerContactsCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomerContactsDelegate, new object[] {
                        customerId}, this.onEndGetCustomerContactsDelegate, this.onGetCustomerContactsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightDemo.SPC2010Server.ISPC2010WcfService.BeginGetCustomerAddresses(int customerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomerAddresses(customerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> SilverlightDemo.SPC2010Server.ISPC2010WcfService.EndGetCustomerAddresses(System.IAsyncResult result) {
            return base.Channel.EndGetCustomerAddresses(result);
        }
        
        private System.IAsyncResult OnBeginGetCustomerAddresses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customerId = ((int)(inValues[0]));
            return ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).BeginGetCustomerAddresses(customerId, callback, asyncState);
        }
        
        private object[] OnEndGetCustomerAddresses(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> retVal = ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).EndGetCustomerAddresses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCustomerAddressesCompleted(object state) {
            if ((this.GetCustomerAddressesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomerAddressesCompleted(this, new GetCustomerAddressesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomerAddressesAsync(int customerId) {
            this.GetCustomerAddressesAsync(customerId, null);
        }
        
        public void GetCustomerAddressesAsync(int customerId, object userState) {
            if ((this.onBeginGetCustomerAddressesDelegate == null)) {
                this.onBeginGetCustomerAddressesDelegate = new BeginOperationDelegate(this.OnBeginGetCustomerAddresses);
            }
            if ((this.onEndGetCustomerAddressesDelegate == null)) {
                this.onEndGetCustomerAddressesDelegate = new EndOperationDelegate(this.OnEndGetCustomerAddresses);
            }
            if ((this.onGetCustomerAddressesCompletedDelegate == null)) {
                this.onGetCustomerAddressesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomerAddressesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomerAddressesDelegate, new object[] {
                        customerId}, this.onEndGetCustomerAddressesDelegate, this.onGetCustomerAddressesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightDemo.SPC2010Server.ISPC2010WcfService.BeginGetCustomerForUpdate(int customerId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCustomerForUpdate(customerId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightDemo.SPC2010Server.MethodStatus SilverlightDemo.SPC2010Server.ISPC2010WcfService.EndGetCustomerForUpdate(out SilverlightDemo.SPC2010Server.Customer customer, out byte[] grfa, out string message, System.IAsyncResult result) {
            return base.Channel.EndGetCustomerForUpdate(out customer, out grfa, out message, result);
        }
        
        private System.IAsyncResult OnBeginGetCustomerForUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customerId = ((int)(inValues[0]));
            return ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).BeginGetCustomerForUpdate(customerId, callback, asyncState);
        }
        
        private object[] OnEndGetCustomerForUpdate(System.IAsyncResult result) {
            SilverlightDemo.SPC2010Server.Customer customer = this.GetDefaultValueForInitialization<SilverlightDemo.SPC2010Server.Customer>();
            byte[] grfa = this.GetDefaultValueForInitialization<byte[]>();
            string message = this.GetDefaultValueForInitialization<string>();
            SilverlightDemo.SPC2010Server.MethodStatus retVal = ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).EndGetCustomerForUpdate(out customer, out grfa, out message, result);
            return new object[] {
                    customer,
                    grfa,
                    message,
                    retVal};
        }
        
        private void OnGetCustomerForUpdateCompleted(object state) {
            if ((this.GetCustomerForUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCustomerForUpdateCompleted(this, new GetCustomerForUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCustomerForUpdateAsync(int customerId) {
            this.GetCustomerForUpdateAsync(customerId, null);
        }
        
        public void GetCustomerForUpdateAsync(int customerId, object userState) {
            if ((this.onBeginGetCustomerForUpdateDelegate == null)) {
                this.onBeginGetCustomerForUpdateDelegate = new BeginOperationDelegate(this.OnBeginGetCustomerForUpdate);
            }
            if ((this.onEndGetCustomerForUpdateDelegate == null)) {
                this.onEndGetCustomerForUpdateDelegate = new EndOperationDelegate(this.OnEndGetCustomerForUpdate);
            }
            if ((this.onGetCustomerForUpdateCompletedDelegate == null)) {
                this.onGetCustomerForUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCustomerForUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCustomerForUpdateDelegate, new object[] {
                        customerId}, this.onEndGetCustomerForUpdateDelegate, this.onGetCustomerForUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightDemo.SPC2010Server.ISPC2010WcfService.BeginUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateCustomer(ref customer, ref grfa, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightDemo.SPC2010Server.MethodStatus SilverlightDemo.SPC2010Server.ISPC2010WcfService.EndUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, out string message, System.IAsyncResult result) {
            return base.Channel.EndUpdateCustomer(ref customer, ref grfa, out message, result);
        }
        
        private System.IAsyncResult OnBeginUpdateCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightDemo.SPC2010Server.Customer customer = ((SilverlightDemo.SPC2010Server.Customer)(inValues[0]));
            byte[] grfa = ((byte[])(inValues[1]));
            return ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).BeginUpdateCustomer(ref customer, ref grfa, callback, asyncState);
        }
        
        private object[] OnEndUpdateCustomer(System.IAsyncResult result) {
            SilverlightDemo.SPC2010Server.Customer customer = this.GetDefaultValueForInitialization<SilverlightDemo.SPC2010Server.Customer>();
            byte[] grfa = this.GetDefaultValueForInitialization<byte[]>();
            string message = this.GetDefaultValueForInitialization<string>();
            SilverlightDemo.SPC2010Server.MethodStatus retVal = ((SilverlightDemo.SPC2010Server.ISPC2010WcfService)(this)).EndUpdateCustomer(ref customer, ref grfa, out message, result);
            return new object[] {
                    customer,
                    grfa,
                    message,
                    retVal};
        }
        
        private void OnUpdateCustomerCompleted(object state) {
            if ((this.UpdateCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCustomerCompleted(this, new UpdateCustomerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateCustomerAsync(SilverlightDemo.SPC2010Server.Customer customer, byte[] grfa) {
            this.UpdateCustomerAsync(customer, grfa, null);
        }
        
        public void UpdateCustomerAsync(SilverlightDemo.SPC2010Server.Customer customer, byte[] grfa, object userState) {
            if ((this.onBeginUpdateCustomerDelegate == null)) {
                this.onBeginUpdateCustomerDelegate = new BeginOperationDelegate(this.OnBeginUpdateCustomer);
            }
            if ((this.onEndUpdateCustomerDelegate == null)) {
                this.onEndUpdateCustomerDelegate = new EndOperationDelegate(this.OnEndUpdateCustomer);
            }
            if ((this.onUpdateCustomerCompletedDelegate == null)) {
                this.onUpdateCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateCustomerDelegate, new object[] {
                        customer,
                        grfa}, this.onEndUpdateCustomerDelegate, this.onUpdateCustomerCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightDemo.SPC2010Server.ISPC2010WcfService CreateChannel() {
            return new SPC2010WcfServiceClientChannel(this);
        }
        
        private class SPC2010WcfServiceClientChannel : ChannelBase<SilverlightDemo.SPC2010Server.ISPC2010WcfService>, SilverlightDemo.SPC2010Server.ISPC2010WcfService {
            
            public SPC2010WcfServiceClientChannel(System.ServiceModel.ClientBase<SilverlightDemo.SPC2010Server.ISPC2010WcfService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCustomers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCustomers", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightDemo.SPC2010Server.MethodStatus EndGetCustomers(out System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer> customers, out string message, System.IAsyncResult result) {
                object[] _args = new object[2];
                SilverlightDemo.SPC2010Server.MethodStatus _result = ((SilverlightDemo.SPC2010Server.MethodStatus)(base.EndInvoke("GetCustomers", _args, result)));
                customers = ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Customer>)(_args[0]));
                message = ((string)(_args[1]));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCustomerContacts(int customerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customerId;
                System.IAsyncResult _result = base.BeginInvoke("GetCustomerContacts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> EndGetCustomerContacts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Contact>)(base.EndInvoke("GetCustomerContacts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCustomerAddresses(int customerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customerId;
                System.IAsyncResult _result = base.BeginInvoke("GetCustomerAddresses", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> EndGetCustomerAddresses(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightDemo.SPC2010Server.Address>)(base.EndInvoke("GetCustomerAddresses", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCustomerForUpdate(int customerId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = customerId;
                System.IAsyncResult _result = base.BeginInvoke("GetCustomerForUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightDemo.SPC2010Server.MethodStatus EndGetCustomerForUpdate(out SilverlightDemo.SPC2010Server.Customer customer, out byte[] grfa, out string message, System.IAsyncResult result) {
                object[] _args = new object[3];
                SilverlightDemo.SPC2010Server.MethodStatus _result = ((SilverlightDemo.SPC2010Server.MethodStatus)(base.EndInvoke("GetCustomerForUpdate", _args, result)));
                customer = ((SilverlightDemo.SPC2010Server.Customer)(_args[0]));
                grfa = ((byte[])(_args[1]));
                message = ((string)(_args[2]));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = customer;
                _args[1] = grfa;
                System.IAsyncResult _result = base.BeginInvoke("UpdateCustomer", _args, callback, asyncState);
                customer = ((SilverlightDemo.SPC2010Server.Customer)(_args[0]));
                grfa = ((byte[])(_args[1]));
                return _result;
            }
            
            public SilverlightDemo.SPC2010Server.MethodStatus EndUpdateCustomer(ref SilverlightDemo.SPC2010Server.Customer customer, ref byte[] grfa, out string message, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = customer;
                _args[1] = grfa;
                SilverlightDemo.SPC2010Server.MethodStatus _result = ((SilverlightDemo.SPC2010Server.MethodStatus)(base.EndInvoke("UpdateCustomer", _args, result)));
                customer = ((SilverlightDemo.SPC2010Server.Customer)(_args[0]));
                grfa = ((byte[])(_args[1]));
                message = ((string)(_args[2]));
                return _result;
            }
        }
    }
}
